import os
import torch
import numpy as np
from PIL import Image
from hair_spotter_class import HairClassifier
from torchvision import transforms
from scipy.spatial.distance import cosine

# Load your trained model and average embeddings
hc = HairClassifier(data_dir="src/self/hair_spotter/training_hair")
hc.load_weights("src/self/hair_spotter/weights_3.pth")

# Paste your avg_embeddings dictionary here from previous step
avg_embeddings = np.load("src/self/hair_spotter/avg_embeddings.npy", allow_pickle=True).item()

# Feature extractor
feature_extractor = torch.nn.Sequential(*(list(hc.model.children())[:-1]))

# Transform (same as training)
transform = transforms.Compose([
    transforms.Resize((224, 224)),
    transforms.ToTensor(),
    transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])
])

# Directory with new images
new_images_dir = "datasets/ddi"
image_files = [f for f in os.listdir(new_images_dir) if f.lower().endswith(('.jpg', '.jpeg', '.png'))]

def get_embedding(img_path):
    img = Image.open(img_path).convert('RGB')
    img_t = transform(img).unsqueeze(0).to(hc.device)
    with torch.no_grad():
        emb = feature_extractor(img_t)
        emb = emb.view(emb.size(0), -1).cpu().numpy()[0]
    return emb

# Example usage: change these to your actual image filenames
img1_path = "datasets/ddi/000001.png"
img2_path = "datasets/ddi/000001.png"

emb1 = get_embedding(img1_path)
emb2 = get_embedding(img2_path)

similarity = 1 - cosine(emb1, emb2)
print(f"Cosine similarity between {os.path.basename(img1_path)} and {os.path.basename(img2_path)}: {similarity:.4f}")

for img_file in image_files:
    img_path = os.path.join(new_images_dir, img_file)
    img = Image.open(img_path).convert('RGB')
    img_t = transform(img).unsqueeze(0).to(hc.device)
    with torch.no_grad():
        emb = feature_extractor(img_t)
        emb = emb.view(emb.size(0), -1).cpu().numpy()[0]
    # Compute cosine similarity to each class average
    sim_hair = 1 - cosine(emb, avg_embeddings[0])
    sim_not_hair = 1 - cosine(emb, avg_embeddings[1])
    predicted_class = "hair" if sim_hair > sim_not_hair else "not_hair"
    print(f"{img_file}: {predicted_class} (hair similarity: {sim_hair:.4f}, not_hair similarity: {sim_not_hair:.4f})")